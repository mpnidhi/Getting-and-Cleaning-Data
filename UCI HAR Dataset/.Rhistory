next()
nxt()
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
0
quit()
str(lm)
str(ls)
str(quit)
str(dir)
str(rnorm)
rnorm(100,2,4)
?rnorm
x<- rnorm(100,2,4)
matrix(x,10,10)
matrix(x,nrow=10,ncol=10)
?factor
library("swirl")
ls()
rm(list=ls())
swirl()
num_vect(0.5,55,-10,6)
num_vect <- vector(0.5,55,-10,6)
num_vect <- num_vect(0.5,55,-10,6)
num_vect <- (0.5,55,-10,6)
?vector
vector num_vect(0.5,55,-10,6)
num_vect<- a(0.5,55,-10,6)
num_vect <- vector c(0.5,55,-10,6)
num_vect <- numeric c(0.5,55,-10,6)
num_vect <- numeric(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
play()
?c
info()
nxt()
q()
play()
?vector
nxt()
tf <- num_vect-1
tf <- num_vect <1
tf
num_vect>=6
my_char<- c("my","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Mod")
my_name
paste(collapse,my_name)
paste(my_name, collapse="")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), (c("X", "Y", "Z"),collapse="")
paste(c(1:3), c("X", "Y", "Z"), collapse="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<- sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(count(is.TRUE(my_na))
)
sum((is.TRUE(my_na)))
sum((is.TRUE(my_data)))
sum((is.true(my_na)))
q()
library("swirl")
rm(list=ls())
swirl()
my_na
numb <- count(my_na(TRUE))
n<-sum(my_na(TRUE))
sum(my_na)
my_data
sum(my_data)
0/0
inf - inf
0/0 - 0/0
Inf - Inf
x
x[1:10]
x[is.na(x)].
x[is.na(x)]
play()
is.na(x)
x[is.na(x)]
nxt()
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
z<- c(x[3,5,7])
x[3,5,7,]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x(-c(2,10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["2"]
vect["bar"]
vect[c("foo", "bar")]
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf<- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,
country)
5:20
select(cran, r_arch:country
)
select(cran, country:r_arch)
select(cran, country:r_arch)
print(cran)
print(cran,x:package)
cran
select(cran,-time)
select(cran,-(x:size))
select(cran,-(5:20))
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-x:-size)
select(cran,-(5:20))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,
| country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,desc(country),desc(r_version),ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size/2^10)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size-1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
library(dplyr)rm("mydf")
rm("mydf")
cran
?group_by
by_package<-group(cran,package)
by_package<-group_by(cran,package)
by_package
summarize(mean(group_by(cran,size)))
summarize(mean(group_by(cran,package),size))
group_by(
)
summarize(mean(group(cran,by_package),size))
summarize(mean(group_by(cran,by_package),size))
summarize(mean(group_by(cran,package),size))
summarize(mean(group_by(cran,package),size))
omit()
skip()
q()
library("swirl")
swirl()
submit()
?separate
?separate
?separate
submit()
submit()
submit()
submit()
submit()
?separate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset((
)
reset()
submit()
submit()
submit()
?separate
library(tidyr)
?separate
install.package("tidyr")
install.packages("tidyr")
library(tidyr)
?separate
submit()
submit()
submit()
submit()
submit()
select(-contains("total"))
select(sat,-contains("total"))
sat2<-select(sat,-contains("total"))
gather(sat2,key,value,-score_range)
sat3<-gather(sat2,key,value,-score_range)
separate(sat3,key,into=("part","sex))
separate(sat3,key,into=("part","sex"))
separate(sat3,key,into=('part','sex'))
sepaate(sat3,key,into= c("part","sex"),sep = "\\_" )
separate(sat3,key,into= c("part","sex"),sep = "\\_" )
submit()
submit()
submit()
sat2
sat3
submit()
gather(sat2,key="part",value="count", -score_range)
?gather
submit()
gather(sat2,key="part",value="count", -score_range)
sat
submit()
sat4<- gather(sat2,key="part",value="count", - score_range)
sat4
sat4<- gather(sat2,key="part",value="count",-score_range)
sat4
sat4<- gather(sat2,key="part",value="count",-"score_range")
sat4<- gather(sat2,key="part",value="count",-score_range)
sat4
submit()
sat4<- gather(sat2,key="part",value="count")
sat4
sat %>%
select(-contains("total")) %>%
gather(key="part",value="count") %>%
separate(key,into= c("part","sex"),sep = "\\_" ) %>%
print
sat2 <- select(sat,-contains("total"))
sat3<-gather(sat2,key="part",value="count")
sat4<-separate(sat3,key,into= c("part","sex"),sep = "\\_" )
sat3
sat2
sat3<-gather(sat2,key="part",value="count",-score_range)
sat3
submit()
reset()
submit()
sat %>%
select(-contains("total")) %>%
gather(key="part",value="count",-score_range) %>%
separate(key,into= c("part","sex"),sep = "\\_" ) %>%
print
separate(sat2,key,into= c("part","sex"),sep = "\\_" )
header(sat)
head(sat)
sat2<- select(-contains("total"))
sat2<- select(sat,-contains("total"))
sat2
sat3 <- gather(sat2,key="part",value="count",-score_range)
sat2
sat3 <- gather(sat2,key=part_sex,value=count,-score_range)
sat3
sat3 <- gather(sat2,key=part_sex,value=count,-contains("score"))
sat3
submit()
reset()
submit()
submit()
submit()
submit()
q()
demo()
swirl()
swirl()
q()
q()
q()
install.packages("swirl")
install.packages("dplyr")
install.packages("dplyr")
?dplyr
install.packages('dplyr')
install.packages("dplyr")
swirl()
library(swirl)
rm(list=ls())
swirl()
?InstallCourses
install_from_swirl("Manipulating Data with dplyr")
swirl()
swirl()
0
swirl()
3
rm(list=ls())
swirl()
library(swirl)
swirl()
2
3
4
5
6
1
sriwl()
swirl()
swirl()
install_course(swirl)
install_course("swirl)
""
)
""
install_course("swirl")
install.packages(dplyr)
?dplyr
install.packages("dplyr")
library("swirl")
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
intall.packages("dplyr")
install.packages("dplyr")
library("swirl")
swirl()
install.packages("Getting and Cleaning Data")
install.packages("Tidying Data with tidyr")
swirl()
library("swirl")
swirl()
q()
library("swirl")
swirl()
library(dplyr)
info()
bye()
install_from_swirl("Grouping and Chaining with dplyr")
library("swirl")
swirl()
tbl_df()
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
bye()
library("swirl")
swirl()
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
install.packages(tidyr)
install.packages("tidyr)
")
install.packages("tidyr")
library("swirl")
swirl()
submit()
reset()
swirl()
submit
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
extract_numeric("class")
extract_numeric(class)
submit()
?mutate
submit()
submit()
submit()
play(()
play()
quit()
nxt()
submit()
submit()
submit()
submit()
submit()
quit()
?names
View(features)
setwd("D:/Coursera Files/Getting and Cleaning Data/CourseProject")
View("features")
View(features)
library(plyr)
# Step 1
# Merge the training and test sets to create one data set
###############################################################################
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# create 'x' data set
x_data <- rbind(x_train, x_test)
# create 'y' data set
y_data <- rbind(y_train, y_test)
# create 'subject' data set
subject_data <- rbind(subject_train, subject_test)
# Step 2
# Extract only the measurements on the mean and standard deviation for each measurement
###############################################################################
features <- read.table("features.txt")
# get only columns with mean() or std() in their names
mean_and_std_features <- grep("-(mean|std)\\(\\)", features[, 2])
# subset the desired columns
x_data <- x_data[, mean_and_std_features]
# correct the column names
names(x_data) <- features[mean_and_std_features, 2]
# Step 3
# Use descriptive activity names to name the activities in the data set
###############################################################################
activities <- read.table("activity_labels.txt")
# update values with correct activity names
y_data[, 1] <- activities[y_data[, 1], 2]
# correct column name
names(y_data) <- "activity"
# Step 4
# Appropriately label the data set with descriptive variable names
###############################################################################
# correct column name
names(subject_data) <- "subject"
# bind all the data in a single data set
all_data <- cbind(x_data, y_data, subject_data)
# Step 5
# Create a second, independent tidy data set with the average of each variable
# for each activity and each subject
###############################################################################
# 66 <- 68 columns but last two (activity & subject)
averages_data <- ddply(all_data, .(subject, activity), function(x) colMeans(x[, 1:66]))
library(plyr)
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
setwd("D:/Coursera Files/Getting and Cleaning Data/CourseProject/UCI HAR Dataset")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
x_data <- rbind(x_train, x_test)
# create 'y' data set
y_data <- rbind(y_train, y_test)
# create 'subject' data set
subject_data <- rbind(subject_train, subject_test)
features <- read.table("features.txt")
x_data <- x_data[, mean_or_std_in_features]
mean_or_std_in_features <- grep("-(mean|std)\\(\\)", features[, 2])
x_data <- x_data[, mean_or_std_in_features]
View(features)
library(dplyr)
library("swirl")
swirl()
library(tidyr)
library(dplyr)
library("swirl")
swirl()
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("tidyr")
